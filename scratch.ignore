📋 COPY EVERYTHING BELOW THIS LINE:

  # Debug Thread - Cycle 22 Critical Fixes & Testing Preparation

  ## Your Mission

  Apply 3 critical fixes to make Cycle 22 fully functional, then prepare the system for user testing.

  ---

  ## Context

  Writer thread completed Cycle 22 implementation (~9,500 lines of code) but testing revealed 3
  routing/configuration issues preventing the system from working:

  1. **RAG routes not registered** - `/api/chat/*` endpoints return 404
  2. **Upload routes redirected** - Cycle 22 upload code never executes (middleware redirects to legacy code)
  3. **Frontend endpoint mismatch** - Parsing status polling uses wrong endpoint

  All code is written and working - just needs wiring fixes.

  ---

  ## Your Tasks

  ### Task 1: Register RAG Routes in server.ts

  **File**: `/home/darney/projects/GBGreg/backend/src/server.ts`

  **Step 1a - Add Import** (around line 70, after other route imports):
  ```typescript
  import { createAIChatRoutes } from './routes/aiChatRoutes';

  Step 1b - Register Route (around line 270, after other route registrations):
  // Cycle 22: AI RAG Routes
  app.use('/api/chat', createAIChatRoutes(xmlWorkflowPool));

  Why: The aiChatRoutes.ts file exists but was never imported/registered, causing all /api/chat/* requests to return
   404.

  ---
  Task 2: Remove Upload Route Redirect

  File: /home/darney/projects/GBGreg/backend/src/server.ts

  Find (around lines 240-248):
  app.use('/api/projects', (req, res, next) => {
    if (req.path === '/upload' && req.method === 'POST') {
      req.url = '/zip-upload';
      return ingestionRoutes(req, res, next);
    }
    next();
  });

  Fix Option A - Delete Entire Block (Recommended):
  Just remove the entire middleware block. Cycle 22 routes should handle uploads.

  Fix Option B - Comment Out Redirect (Preserve for debugging):
  app.use('/api/projects', (req, res, next) => {
    if (req.path === '/upload' && req.method === 'POST') {
      // DISABLED: Allow Cycle 22 routes to handle uploads
      // req.url = '/zip-upload';
      // return ingestionRoutes(req, res, next);
    }
    next();
  });

  Why: This middleware intercepts upload requests and redirects them to legacy Cycle 21 ingestion routes before
  Cycle 22 routes can handle them.

  ---
  Task 3: Fix Frontend Parsing Status Endpoint

  File: /home/darney/projects/GBGreg/gbgreg-frontend/src/api/client.js

  Find (line ~343):
  const response = await apiClient.get(`/projects/${projectId}/parsing-status`)

  Change To:
  const response = await apiClient.get(`/projects/${projectId}/status`)

  Why: Backend route is /api/projects/:id/status but frontend is calling /api/projects/:id/parsing-status.

  ---
  Task 4: Rebuild and Restart Backend

  Commands:
  cd /home/darney/projects/GBGreg/backend

  # Rebuild TypeScript
  npm run build

  # Stop old backend
  pkill -f "GBGreg/backend" || echo "No existing backend process"

  # Start new backend (background with logging)
  nohup npm start > /tmp/gbgreg-backend.log 2>&1 &

  # Wait for startup
  sleep 5

  ---
  Task 5: Verification Tests

  Run these tests to confirm fixes worked:

  Test 1 - Backend Health:
  curl http://localhost:3336/api/health
  # Expected: {"status":"healthy","timestamp":"..."}

  Test 2 - RAG Route Now Works (should NOT be 404):
  curl -X POST http://localhost:3336/api/chat/gbg-query \
    -H "Content-Type: application/json" \
    -d '{"projectId": 25, "query": "What instruments are used in this workflow?"}'

  Expected: Should return JSON with response, retrievedContext, confidenceScore (might have errors about missing
  embeddings, but should NOT be 404)

  Test 3 - Projects List:
  curl http://localhost:3336/api/browse/projects
  # Expected: Array of projects including existing ones

  Test 4 - Parsing Status Endpoint:
  curl http://localhost:3336/api/projects/25/status
  # Expected: {"status":"completed","progress":100,...} or similar

  Test 5 - Upload (Cycle 22 Route):
  curl -X POST http://localhost:3336/api/projects/upload \
    -F "file=@/home/darney/projects/GBGreg/_examples/4815-AssayQuant.zip" \
    -F "projectNumber=TEST-DEBUG" \
    -F "projectApplication=Debug Test" \
    -F "customerName=Debug Thread"

  Expected: Should return project metadata with projectId, filesExtracted, etc.

  ---
  Task 6: Create Testing Guide for User

  Create a file /tmp/USER-TESTING-GUIDE.md with:

  1. Backend Verification - How to check backend is running correctly
  2. RAG Testing - Example queries to test AI RAG system
  3. Upload Testing - How to test multi-project upload via frontend
  4. Frontend Testing - What to check in the UI (http://192.168.0.218:8080)
  5. Known Issues - Any problems discovered during verification
  6. Performance Benchmarks - Expected response times

  ---
  Task 7: Document What You Did

  Create
  /home/darney/projects/GBGreg/docs/thread-cycles/cycle-22-xml-workflow-integration/PHASE-1-IMPLEMENTATION-REPORT.md
   with:

  - List of files modified (should be 2: server.ts, client.js)
  - What each fix addressed
  - Verification test results (pass/fail for each test)
  - Any errors encountered and how you resolved them
  - System ready status (YES/NO for production)

  ---
  Success Criteria

  You're done when:

  - All 3 fixes applied
  - Backend rebuilds successfully
  - Backend starts without errors
  - All 5 verification tests PASS
  - User testing guide created
  - Implementation report documented
  - No 404 errors on /api/chat/* endpoints
  - Upload uses Cycle 22 code (not legacy redirect)
  - Frontend can poll parsing status

  ---
  Important Notes

  - DO NOT ask for permission - just make the changes
  - DO NOT create new files - only modify server.ts and client.js
  - DO run all verification tests and report results
  - DO check backend logs (/tmp/gbgreg-backend.log) if tests fail
  - DO provide clear PASS/FAIL status for each test

  ---
  Expected Timeline

  - Fixes: 5 minutes
  - Rebuild/restart: 2 minutes
  - Verification: 3 minutes
  - Documentation: 5 minutes
  - Total: ~15 minutes

  ---
  If Something Goes Wrong

  Backend Won't Start

  - Check: /tmp/gbgreg-backend.log for errors
  - Verify: TypeScript compiled without errors (npm run build)
  - Check: Port 3336 not already in use (lsof -i :3336)

  RAG Routes Still 404

  - Verify: Import added to server.ts
  - Verify: Route registration added to server.ts
  - Check: TypeScript compiled the changes (dist/server.js should have the new code)

  Upload Still Redirects

  - Verify: Middleware block deleted or commented out
  - Check: Routes registered in correct order (Cycle 22 before legacy)
  - Test: Add console.log() in projectUploadRoutes to see if it's called

  ---
  Context Files You May Need

  - Writer Thread Summary: /docs/thread-cycles/cycle-22-xml-workflow-integration/WRITER-THREAD-COMPLETE-SUMMARY.md
  - Debug Findings: /docs/thread-cycles/cycle-22-xml-workflow-integration/DEBUG-THREAD-FINDINGS.md
  - Database Setup: /docs/thread-cycles/cycle-22-xml-workflow-integration/DATABASE-SETUP-COMPLETE.md

  ---
  Start immediately. Report back with test results and user testing guide.

  ---

  **📋 END COPY**

  This prompt will have the debug thread agent:
  1. Apply all 3 fixes
  2. Rebuild and restart the backend
  3. Run comprehensive verification tests
  4. Create a user testing guide for you
  5. Document everything

  Just paste it and let it run - should take ~15 minutes and you'll get back a testing guide you can use for your
  manual tests!

───────────────────────────────────────────────────────────────────────────────────────────
> 
───────────────────────────────────────────────────────────────────────────────────────────
  darney@dinux:/home/darney/projects/GBGreg/gbgreg-writer
  ⏵⏵ accept edits on (shift+tab to cycle)
